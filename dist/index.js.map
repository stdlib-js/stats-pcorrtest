{
  "version": 3,
  "sources": ["../lib/print.js", "../lib/pcorr.js", "../lib/validate.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True correlation coefficient is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar max = require( '@stdlib/math-base-special-max' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar variance = require( '@stdlib/stats-base-variance' );\nvar mean = require( '@stdlib/stats-base-mean' );\n\n\n// MAIN //\n\n/**\n* Computes the Pearson product-moment correlation coefficient between `x` and `y`.\n*\n* @private\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @returns {number} correlation coefficient\n*\n* @example\n* var x = [ 1.0, 2.0, 2.0, 1.0 ];\n* var y = [ 1.8, 2.2, 2.5, 1.4 ];\n* var r = pcorr( x, y );\n* // returns ~0.905\n*/\nfunction pcorr( x, y ) {\n\tvar denom;\n\tvar num;\n\tvar out;\n\tvar xy;\n\tvar xm;\n\tvar ym;\n\tvar i;\n\tvar n;\n\n\tn = x.length;\n\txm = mean( n, x, 1 );\n\tym = mean( n, y, 1 );\n\txy = 0.0;\n\tfor ( i = 0; i < n; i++ ) {\n\t\txy += x[ i ] * y[ i ];\n\t}\n\tnum = xy - ( n * xm * ym );\n\tdenom = ( n-1 ) * sqrt(variance(n, 1, x, 1)) * sqrt(variance(n, 1, y, 1) );\n\tout = num / denom;\n\n\t// Handle rounding errors:\n\treturn max( min( out, 1.0 ), -1.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = pcorr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar indexOf = require( '@stdlib/utils-index-of' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar alternative = [ 'two-sided', 'less', 'greater' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.rho] - correlation coefficient unter HO\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'rho': 0.8\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif (\n\t\t\t!isNumber( opts.alpha ) ||\n\t\t\tisnan( opts.alpha ) ||\n\t\t\topts.alpha < 0.0 ||\n\t\t\topts.alpha > 1.0\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( indexOf( alternative, opts.alternative ) === -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative', alternative.join( '\", \"' ), opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'rho' ) ) {\n\t\topts.rho = options.rho;\n\t\tif (\n\t\t\t!isNumber( opts.rho ) ||\n\t\t\tisnan( opts.rho ) ||\n\t\t\topts.rho < -1.0 ||\n\t\t\topts.rho > 1.0\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number on the interval: [-1, 1]. Option: `%s`.', 'rho', opts.rho ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert-is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\nvar quantileFactory = require( '@stdlib/stats-base-dists-normal-quantile' ).factory;\nvar cdfFactory = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar format = require( '@stdlib/string-format' );\nvar atanh = require( '@stdlib/math-base-special-atanh' );\nvar tanh = require( '@stdlib/math-base-special-tanh' );\nvar tCDF = require( '@stdlib/stats-base-dists-t-cdf' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar min = require( '@stdlib/math-base-special-min' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\nvar pcorr = require( './pcorr.js' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar normQuantile = quantileFactory( 0.0, 1.0 );\nvar normCDF = cdfFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a Pearson product-moment correlation test between paired samples.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.rho=0.0] - correlation under H0\n* @throws {TypeError} first argument has to be a typed array or array of numbers\n* @throws {TypeError} second argument has to be a typed array or array of numbers\n* @throws {RangeError} first and second arguments must have the same length\n* @throws {Error} first and second arguments must be arrays having the same length\n* @throws {Error} first and second arguments must contain at least four elements\n* @throws {TypeError} options must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 2, 4, 3, 1, 2, 3 ];\n* var y = [ 3, 2, 4, 1, 2, 4 ];\n* var out = pcorrTest( x, y );\n*/\nfunction pcorrTest( x, y, options ) {\n\tvar method;\n\tvar alpha;\n\tvar cint;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar rho;\n\tvar val;\n\tvar df;\n\tvar se;\n\tvar n;\n\tvar r;\n\tvar z;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t}\n\tn = x.length;\n\tif ( n !== y.length ) {\n\t\tthrow new RangeError( 'invalid arguments. First and second arguments must be arrays having the same length.' );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( n < 4 ) {\n\t\tthrow new Error( 'invalid arguments. Not enough observations. First and second arguments must contain at least four observations.' );\n\t}\n\tif ( opts.rho === void 0 ) {\n\t\trho = 0.0;\n\t} else {\n\t\trho = opts.rho;\n\t}\n\tif ( opts.alternative === void 0 ) {\n\t\talt = 'two-sided';\n\t} else {\n\t\talt = opts.alternative;\n\t}\n\n\tr = pcorr( x, y );\n\tz = atanh( r );\n\tse = 1.0 / sqrt( n - 3 );\n\tif ( rho === 0.0 ) {\n\t\t// Use t-test for H0: rho = 0.0 vs H1: rho != 0.0...\n\t\tmethod = 't-test for Pearson correlation coefficient';\n\t\tdf = n - 2;\n\t\tstat = sqrt( df ) * r / sqrt( 1.0 - (r*r) );\n\t\tswitch ( alt ) {\n\t\tcase 'greater':\n\t\t\tpval = 1.0 - tCDF( stat, df );\n\t\t\tbreak;\n\t\tcase 'less':\n\t\t\tpval = tCDF( stat, df);\n\t\t\tbreak;\n\t\tcase 'two-sided':\n\t\tdefault:\n\t\t\tpval = 2.0 * min( tCDF( stat, df), 1.0 - tCDF( stat, df ));\n\t\t\tbreak;\n\t\t}\n\t} else {\n\t\t// Use large-sample normality to calculate p-value based on Fisher's z transform...\n\t\tmethod = 'Fisher\\'s z transform test for Pearson correlation coefficient';\n\t\tstat = ( z - atanh( rho ) ) * sqrt( n - 3 );\n\t\tswitch ( alt ) {\n\t\tcase 'greater':\n\t\t\tpval = normCDF( -stat );\n\t\t\tbreak;\n\t\tcase 'less':\n\t\t\tpval = 1.0 - normCDF( -stat );\n\t\t\tbreak;\n\t\tcase 'two-sided':\n\t\tdefault:\n\t\t\tpval = 2.0 * min( normCDF( -stat ), 1.0 - normCDF( -stat ));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tswitch ( alt ) {\n\tcase 'greater':\n\t\tcint = [ tanh( z - ( se*normQuantile( 1.0 - alpha ) ) ), 1.0 ];\n\t\tbreak;\n\tcase 'less':\n\t\tcint = [ -1.0, tanh( z + ( se*normQuantile( 1.0 - alpha ) ) ) ];\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tval = se * normQuantile( 1.0 - ( alpha/2.0 ) );\n\t\tcint = [ tanh( z - val ), tanh( z + val ) ];\n\t\tbreak;\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', method );\n\tsetReadOnly( out, 'nullValue', rho );\n\tsetReadOnly( out, 'pcorr', r );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pcorrTest;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Pearson product-moment correlation test between paired samples.\n*\n* @module @stdlib/stats-pcorrtest\n*\n* @example\n* var pcorrtest = require( '@stdlib/stats-pcorrtest' );\n* var incrspace = require( '@stdlib/array-base-incrspace' );\n*\n* var a = incrspace( 1, 11, 1 );\n* var b = incrspace( 11, 21, 1 );\n*\n* var out = pcorrtest( a, b );\n* var table = out.print();\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_print", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "format", "print", "opts", "decision", "dgts", "str", "require_pcorr", "__commonJSMin", "exports", "module", "max", "min", "sqrt", "variance", "mean", "pcorr", "x", "y", "denom", "num", "out", "xy", "xm", "ym", "n", "require_validate", "__commonJSMin", "exports", "module", "isNumber", "isObject", "isnan", "indexOf", "hasOwnProp", "format", "alternative", "validate", "opts", "options", "require_main", "__commonJSMin", "exports", "module", "isNumberArray", "isTypedArrayLike", "setReadOnly", "quantileFactory", "cdfFactory", "format", "atanh", "tanh", "tCDF", "sqrt", "min", "print", "pcorr", "validate", "normQuantile", "normCDF", "pcorrTest", "x", "y", "options", "method", "alpha", "cint", "opts", "pval", "stat", "alt", "err", "out", "rho", "val", "df", "se", "n", "r", "z", "main"]
}
